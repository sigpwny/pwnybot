from discord.ext.commands import Bot
from discord.ext import commands
from discord_slash import SlashContext
from lib.util import command_decorator, subcommand_decorator, run_from_ctf
import discord
from lib.config import AUTOGENERATED_CHANNELS, ARCHIVE_CATEGORY, INTERNAL_CTFD_URL, CTF_ROLE_ID, UIUC_ROLE_ID
import requests
from discord_slash.model import SlashCommandOptionType as OptionType
import os


class CTF(commands.Cog):
    """Describe what the cog does."""

    def __init__(self, bot: Bot) -> None:
        self.bot = bot

    @commands.bot_has_permissions(manage_channels=True, manage_roles=True)
    @commands.has_permissions(manage_channels=True, manage_roles=True)
    @subcommand_decorator(name={'description': "The name of the CTF"})
    async def create(self, ctx: SlashContext, name: str) -> None:
        '''
        Creates a new CTF!
        '''
        await ctx.defer()

        # Create new category in sidebar
        category_folder = discord.utils.get(
            ctx.guild.categories, name="CTF " + name)
        if category_folder is None:
            category_folder = await ctx.guild.create_category(
                name="CTF " + name,
            )
            await category_folder.set_permissions(
                ctx.author, view_channel=True, connect=True)
            await category_folder.set_permissions(
                self.bot.user, view_channel=True, connect=True)
            await category_folder.set_permissions(
                ctx.guild.default_role, view_channel=False, connect=False)
            await category_folder.set_permissions(
                ctx.guild.default_role, view_channel=False, connect=False)

        for val in AUTOGENERATED_CHANNELS.values():
            channel = await ctx.guild.create_text_channel(val, category=category_folder)
            if val == AUTOGENERATED_CHANNELS['access']:
                await channel.set_permissions(ctx.guild.default_role, send_messages=False)
                embed = discord.Embed(
                    title="üîî Join this CTF",
                    colour=discord.Colour.dark_gold()
                )
                message = await channel.send(embed=embed)
                await message.add_reaction('‚ùå')
                await message.add_reaction('‚úîÔ∏è')
            if val == AUTOGENERATED_CHANNELS['logs']:
                await channel.set_permissions(ctx.guild.default_role, send_messages=False)
        await ctx.guild.create_voice_channel(f"{name}-general", category=category_folder)
        await ctx.guild.create_voice_channel(f"{name}-work-1", category=category_folder)
        await ctx.guild.create_voice_channel(f"{name}-work-2", category=category_folder)
        await ctx.send(f'The CTF "{name}" has been created!')

    @commands.Cog.listener()
    async def on_reaction_add(self, reaction, user):

        access_chan = reaction.message.channel
        logs_channel = discord.utils.get(
            access_chan.category.text_channels, name=AUTOGENERATED_CHANNELS['logs'])
        if not access_chan.category.startswith("CTF ") or access_chan.name != AUTOGENERATED_CHANNELS['access']:
            return

        if reaction == '‚ùå':
            def action(chan): await chan.set_permissions(
                user, view_channel=False, connect=False)
            await logs_channel.send(f'User <@{user.id}> left this CTF :(')
        elif reaction == '‚úîÔ∏è':
            def action(chan): await chan.set_permissions(
                user, view_channel=True, connect=False)
            await logs_channel.send(f'User <@{user.id}> joined this CTF :)')
        else:
            return

        for channel in access_chan.category.channels:
            if channel.id != access_chan.id:
                action(channel)

    @subcommand_decorator()
    async def optin(self, ctx):
        '''
        For UIUC members: Opts into CTFs automatically
        '''
        ctf_role = discord.utils.get(ctx.guild.roles, id=CTF_ROLE_ID)
        uiuc_role = discord.utils.get(ctx.guild.roles, id=UIUC_ROLE_ID)
        if uiuc_role in ctx.author.roles:
            await ctx.author.add_roles(ctf_role)
            await ctx.send(':white_check_mark: You were given the CTF role.')
        else:
            await ctx.send(':x: You must be UIUC verified to use this command.')

    @subcommand_decorator()
    async def optout(self, ctx):
        '''
        For UIUC members: Opts outof CTFs automatically
        '''
        ctf_role = discord.utils.get(ctx.guild.roles, id=CTF_ROLE_ID)
        uiuc_role = discord.utils.get(ctx.guild.roles, id=UIUC_ROLE_ID)
        if uiuc_role in ctx.author.roles:
            await ctx.author.remove_roles(ctf_role)
            await ctx.send(':white_check_mark: You were given the CTF role.')
        else:
            await ctx.send(':x: You must be UIUC verified to use this command.')

    @commands.bot_has_permissions(manage_channels=True)
    @commands.has_permissions(manage_channels=True)
    @subcommand_decorator()
    @run_from_ctf
    async def delete(self, ctx: SlashContext) -> None:
        '''
        Delete a CTF permanantly! You probably want to archive not delete.
        '''
        await ctx.defer()

        category_folder = ctx.channel.category

        for channel in category_folder.channels:
            await channel.delete()
        await category_folder.delete()

    @commands.bot_has_permissions(manage_channels=True)
    @commands.has_permissions(manage_channels=True)
    @subcommand_decorator()
    @run_from_ctf
    async def archive(self, ctx: SlashContext) -> None:
        '''
        check if all challenges are archived, if not stop archive.
        '''
        await ctx.defer()

        category_folder = ctx.channel.category

        archive_folder = discord.utils.get(
            ctx.guild.categories, name=ARCHIVE_CATEGORY
        )
        if archive_folder is None:
            archive_folder = await ctx.guild.create_category(
                name=ARCHIVE_CATEGORY,
            )

        for ctf_channel in category_folder.text_channels:
            if ctf_channel.name not in AUTOGENERATED_CHANNELS.values():
                # TODO archive each channel in this list :)
                await ctx.send(f'Channel {ctf_channel.name} has not been archived yet, the CTF is not ready for archival.')
                return

        # moves logs & general to archive
        logs_channel = discord.utils.get(
            category_folder.text_channels, name=AUTOGENERATED_CHANNELS['logs'])
        await logs_channel.edit(name=f"{category_folder.name}-{logs_channel.name}", category=archive_folder)
        general_channel = discord.utils.get(
            category_folder.text_channels, name=AUTOGENERATED_CHANNELS['general'])
        await general_channel.edit(name=f"{category_folder.name}-{general_channel.name}", category=archive_folder)

        # Now delete everything else
        for channel in category_folder.channels:
            await channel.delete()
        await category_folder.delete()

        await ctx.send(f'{category_folder.name} has been archived')

    @commands.bot_has_permissions(manage_roles=True)
    @commands.has_permissions(manage_roles=True)
    @subcommand_decorator(who={'description': "The role / member to add to the CTF"})
    @run_from_ctf
    async def addrole(self, ctx: SlashContext, who: OptionType.MENTIONABLE) -> None:
        '''
        Adds a role/member to this CTF
        '''

        await ctx.defer()

        who = int(who)
        # Attempt lookup in roles
        category_folder = ctx.channel.category
        to_add = discord.utils.get(ctx.guild.roles, id=who)
        if to_add is None:
            to_add = await ctx.guild.fetch_member(who)
            if to_add is None:
                await ctx.send(f'Cannot find the user/role {who}')
                return
        else:
            who = f'&{who}'
        await category_folder.set_permissions(
            to_add, view_channel=True, connect=True)

        await ctx.send(f'Added <@{who}> to this CTF!')

    @commands.bot_has_permissions(manage_roles=True)
    @commands.has_permissions(manage_roles=True)
    @subcommand_decorator(who={'description': "The role / member to add to the CTF"})
    @run_from_ctf
    async def remove(self, ctx: SlashContext, who: OptionType.MENTIONABLE) -> None:
        '''
        Removes a role/member from this CTF
        '''
        who = int(who)
        # Attempt lookup in roles
        category_folder = ctx.channel.category
        to_add = discord.utils.get(ctx.guild.roles, id=who)
        if to_add is None:
            to_add = await ctx.guild.fetch_member(who)
            if to_add is None:
                await ctx.send(f'Cannot find the user/role {who}')
                return
        else:
            who = f'&{who}'
        await category_folder.set_permissions(
            to_add, view_channel=False, connect=False)

        await ctx.send(f'Removed <@{who}> from this CTF!')

    @command_decorator(who={'description': "The person to give to"}, points={'description': "How many points"})
    async def give(self, ctx: SlashContext, who: OptionType.USER, points: int):
        '''
        Give a member points on internal CTFd
        '''

        raise NotImplementedError()

        requests.get(INTERNAL_CTFD_URL + "/api/v1/challenges", headers={
            'token': os.getenv("CTFD_TOKEN"),
            'content-type': 'application/json'
        })


def setup(bot: Bot) -> None:
    """Add the extension to the bot."""
    bot.add_cog(CTF(bot))
