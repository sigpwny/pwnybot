from discord.ext.commands import Bot
from discord.ext import commands
from discord_slash import SlashContext
from lib.util import command_decorator, subcommand_decorator, run_from_ctf, sanitize_channel_name
import discord
from datetime import datetime
from lib.config import AUTOGENERATED_CHANNELS
import os


class Chal(commands.Cog):
    """Challenge management for CTF"""

    def __init__(self, bot: Bot) -> None:
        self.bot = bot

    @commands.bot_has_permissions(manage_channels=True)
    @commands.guild_only()
    @subcommand_decorator({'name': {'description': "The name of the challenge to create"}})
    @run_from_ctf
    async def create(self, ctx: SlashContext, name: str) -> None:
        """
            Creates a new challenge inside a CTF
        """

        await ctx.defer()
        # Get CTF category called in
        category_folder = ctx.channel.category

        channel_name = sanitize_channel_name(name)
        await ctx.guild.create_text_channel(
            name=channel_name,
            category=category_folder,
        )

        logs_channel = discord.utils.get(
            category_folder.text_channels, name=AUTOGENERATED_CHANNELS['logs'])
        # Get bot channel and send embed

        embed = discord.Embed(
            title="ðŸ”” New challenge created!",
            description=(
                f"**Challenge name:** {name}\n"
            ),
            colour=discord.Colour.dark_gold(),
        ).set_footer(text=datetime.strftime(datetime.now(), "%a, %d %B %Y, %H:%M UTC"))
        await ctx.send(embed=embed)
        # await ctx.send('done')

    @commands.guild_only()
    @subcommand_decorator({})
    @run_from_ctf
    async def solve(self, ctx: SlashContext) -> None:
        """Solves a CTF challenges

        """
        raise NotImplementedError()

    @commands.guild_only()
    @commands.bot_has_permissions(manage_channels=True)
    @commands.has_permissions(manage_channels=True)
    @subcommand_decorator({})
    @run_from_ctf
    async def delete(self, ctx: SlashContext) -> None:
        """
        Deletes a CTF challenge channel
        """
        challenge = ctx.channel

        if challenge.name in AUTOGENERATED_CHANNELS.values():
            await challenge.send(f'You cannot delete the channel {challenge.name}!')
            return
        await ctx.channel.delete()

    @commands.guild_only()
    @commands.bot_has_permissions(manage_channels=True)
    @commands.has_permissions(manage_channels=True)
    @subcommand_decorator({})
    @run_from_ctf
    async def archive(self, ctx: SlashContext) -> None:
        """Archives a CTF challenge and puts data in log channel

        """
        challenge = ctx.channel

        if challenge.name in AUTOGENERATED_CHANNELS.values():
            await challenge.send(f'You cannot archive the channel {challenge.name}!')
            return

        logs_channel = discord.utils.get(
            challenge.category.text_channels, name=AUTOGENERATED_CHANNELS['logs'])
        print(type(logs_channel))
        fname = f"{challenge.category.name}_{challenge.name}_log.txt"
        with open(fname, 'w') as fw:
            async for m in challenge.history(limit=10000, oldest_first=True):
                fw.write(
                    f"[{m.created_at.replace().strftime('%Y-%m-%d %I:%M %p')} UTC] {m.author.display_name}: {m.content}\n{' '.join(map(lambda x: x.url, m.attachments))}\n"
                )
        # with open(fname, 'rb') as f:
        await logs_channel.send(
            embed=discord.Embed(
                title=f"Discussion for the challenge {challenge.name} has been archived. A text log of the conversation is attached."
            ),
            file=discord.File(fname),
        )

        os.remove(fname)

        await ctx.channel.delete()


def setup(bot: Bot) -> None:
    """Add the extension to the bot."""
    bot.add_cog(Chal(bot))
